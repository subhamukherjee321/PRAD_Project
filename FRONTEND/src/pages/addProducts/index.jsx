import {
  Flex,
  Box,
  FormControl,
  FormLabel,
  Input,
  Stack,
  Button,
  Heading,
  useColorModeValue,
  useToast,
} from "@chakra-ui/react";
import { CloseIcon } from "@chakra-ui/icons";
import { useState } from "react";
import axios from "axios";
import Head from "next/head";

const initState = {
  name: "",
  quantity: 5,
  category: "",
  type: "",
  brand: "",
  description: "",
  price: "",
  discountPrice: "",
  discount: "",
  saveMoney: "",
  images: [],
};

export default function Page() {
  const [formData, setFormData] = useState(initState);
  const [color, setColor] = useState("");
  const [colorData, setColorData] = useState([]);
  const toast = useToast();

  const createImageArray = () => {
    setColorData((prev) => [...prev, { color: color, image_urls: [] }]);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const uploadImg = async (img) => {
    const data = new FormData();
    data.append("file", img);
    data.append("upload_preset", "oby04caq");
    data.append("cloud_name", "drvjfnseu");
    let res = await fetch(
      `https://api.cloudinary.com/v1_1/drvjfnseu/image/upload`,
      {
        method: "POST",
        body: data,
      }
    );
    return await res.json();
  };

  const handleUpload = async (img, name) => {
    try {
      let arr = [];
      for (let i = 0; i < img.length; i++) {
        let data = await uploadImg(img[i]);
        arr.push(data.url);
      }

      colorData.forEach((ele) => {
        if (ele.color == name) {
          ele.image_urls = arr;
        }
      });
      setColorData(colorData);
    } catch (error) {
      console.log(error);
    }
  };

  const addNewProducts = async (data) => {
    let res = await axios.post("http://localhost:8080/products/add", data, {
      headers: {
        auth: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZTI4MTQyMjg5MTA3NmY4OWM0ZmY0MSIsImlhdCI6MTY3NjUzMjcyMywiZXhwIjoxNjc2NTY4NzIzfQ.NKot8BVu2HJqrtbBB3Yxqq_xGmHk4IlzZqOl5ItGeoc",
      },
    });
    console.log("res: ", res);
  };

  const handleSubmit = () => {
    let {
      name,
      category,
      type,
      brand,
      description,
      price,
      discountPrice,
      discount,
      saveMoney,
      images,
    } = formData;

    setFormData((prev) => ({ ...prev, images: colorData }));

    if (
      !name ||
      !category ||
      !type ||
      !brand ||
      !description ||
      !price ||
      !discountPrice ||
      !discount ||
      !saveMoney ||
      !images
    ) {
      toast({
        title: "Fill all the Credentials",
        status: "error",
        duration: 1000,
        isClosable: true,
        position: "top",
      });
    } else {
      addNewProducts(formData);

      toast({
        title: "Product Added Successfully",
        status: "success",
        duration: 1200,
        isClosable: true,
        position: "top",
      });

      // setFormData(initState);
    }
  };

  const handleDelete = (id) => {
    let newData = colorData.filter((ele, i) => i !== id);
    setColorData(newData);
  };

  return (
    <>
      <Head>
        <title>ShopKart/Add Products</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        align={"center"}
        justify={"center"}
        bg={useColorModeValue("gray.50", "gray.800")}
      >
        <Stack spacing={8} mx={"auto"} maxW={"lg"} py={12} px={6}>
          <Stack align={"center"}>
            <Heading fontSize={"3xl"}>Add Products</Heading>
          </Stack>
          <Box
            rounded={"lg"}
            bg={useColorModeValue("white", "gray.700")}
            boxShadow={"lg"}
            p={8}
          >
            <Stack spacing={4}>
              <FormControl id="name">
                <FormLabel>Name Of The Product</FormLabel>
                <Input
                  type="text"
                  name="name"
                  onChange={handleChange}
                  value={formData.name}
                />
              </FormControl>
              <FormControl id="name">
                <FormLabel>Quantity</FormLabel>
                <Input
                  type="number"
                  name="quantity"
                  onChange={handleChange}
                  value={formData.quantity}
                />
              </FormControl>
              <FormControl id="category">
                <FormLabel>Category</FormLabel>
                <Input
                  type="text"
                  name="category"
                  onChange={handleChange}
                  value={formData.category}
                />
              </FormControl>
              <FormControl id="type">
                <FormLabel>Type</FormLabel>
                <Input
                  type="text"
                  name="type"
                  onChange={handleChange}
                  value={formData.type}
                />
              </FormControl>
              <FormControl id="brand">
                <FormLabel>Brand</FormLabel>
                <Input
                  type="text"
                  name="brand"
                  onChange={handleChange}
                  value={formData.brand}
                />
              </FormControl>
              <FormControl id="description">
                <FormLabel>Description</FormLabel>
                <Input
                  type="text"
                  name="description"
                  onChange={handleChange}
                  value={formData.description}
                />
              </FormControl>
              <FormControl id="price">
                <FormLabel>Price</FormLabel>
                <Input
                  type="number"
                  name="price"
                  onChange={handleChange}
                  value={formData.price}
                />
              </FormControl>
              <FormControl id="discountPrice">
                <FormLabel>Discount Price</FormLabel>
                <Input
                  type="number"
                  name="discountPrice"
                  onChange={handleChange}
                  value={formData.discountPrice}
                />
              </FormControl>
              <FormControl id="discount">
                <FormLabel>Discount</FormLabel>
                <Input
                  type="text"
                  name="discount"
                  onChange={handleChange}
                  value={formData.discount}
                />
              </FormControl>
              <FormControl id="saveMoney">
                <FormLabel>Save Money</FormLabel>
                <Input
                  type="text"
                  name="saveMoney"
                  onChange={handleChange}
                  value={formData.saveMoney}
                />
              </FormControl>
              <FormControl id="color">
                <FormLabel>Color Name</FormLabel>
                <Input
                  type="text"
                  name="color"
                  onChange={(e) => setColor(e.target.value)}
                  value={color}
                />
                <Button mt={"0.5rem"} size={"md"} onClick={createImageArray}>
                  Add Image
                </Button>
              </FormControl>

              {colorData?.map((item, i) => {
                return (
                  <Flex justify={"space-between"}>
                    <li key={i}>
                      <label>{item.color}</label>&nbsp;
                      <input
                        multiple
                        type="file"
                        accept="image/jpeg,image/png"
                        onChange={(e) =>
                          handleUpload(e.target.files, item.color)
                        }
                        name={item.color}
                      />
                    </li>
                    <Button
                      color={"white"}
                      size={"sm"}
                      onClick={() => handleDelete(i)}
                    >
                      <CloseIcon
                        fontSize={"0.7rem"}
                        fontWeight={800}
                        color={"red"}
                      />
                    </Button>
                  </Flex>
                );
              })}

              <Stack spacing={10}>
                <Button
                  bg={"blue.400"}
                  color={"white"}
                  _hover={{
                    bg: "blue.500",
                  }}
                  onClick={handleSubmit}
                >
                  ADD
                </Button>
              </Stack>
            </Stack>
          </Box>
        </Stack>
      </Flex>
    </>
  );
}
